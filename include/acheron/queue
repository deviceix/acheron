/* this file is a part of Acheron library which is under MIT license; see LICENSE for more info */

// ReSharper disable CppNonExplicitConvertingConstructor
#pragma once

#include <algorithm>
#include <functional>
#include <initializer_list>
#include <utility>
#include <acheron/__libdef.hpp>
#include <acheron/list>

namespace ach
{
    template<typename T, typename Container = list<T> >
    class queue
    {
    public:
        using container_type = Container;
        using value_type = typename Container::value_type;
        using size_type = typename Container::size_type;
        using reference = typename Container::reference;
        using const_reference = typename Container::const_reference;

        static_assert(std::is_same_v<T, value_type>, "Container::value_type must be same as T");

        /* constructors */
        queue() : c() {}

        explicit queue(const Container& cont) : c(cont) {}

        explicit queue(Container&& cont) : c(std::move(cont)) {}

        queue(const queue& other) : c(other.c) {}

        queue(queue&& other) noexcept : c(std::move(other.c)) {}

        template<typename InputIt>
        queue(InputIt first, InputIt last) : c(first, last) {}

        /* assignment */
        queue& operator=(const queue& other)
        {
            c = other.c;
            return *this;
        }

        queue& operator=(queue&& other) noexcept
        {
            c = std::move(other.c);
            return *this;
        }

        /* element access */
        reference front()
        {
            return c.front();
        }

        const_reference front() const
        {
            return c.front();
        }

        reference back()
        {
            return c.back();
        }

        const_reference back() const
        {
            return c.back();
        }

        /* capacity */
        [[nodiscard]] bool empty() const
        {
            return c.empty();
        }

        [[nodiscard]] size_type size() const
        {
            return c.size();
        }

        /* modifiers */
        void push(const value_type& value)
        {
            c.push_back(value);
        }

        void push(value_type&& value)
        {
            c.push_back(std::move(value));
        }

        template<typename... Args>
        decltype(auto) emplace(Args&&... args)
        {
            return c.emplace_back(std::forward<Args>(args)...);
        }

        void pop()
        {
            c.pop_front();
        }

        void swap(queue& other) noexcept(noexcept(std::swap(c, other.c)))
        {
            std::swap(c, other.c);
        }

        /* friend operators for access to protected member */
        template<typename T2, typename Container2>
        friend bool operator==(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

        template<typename T2, typename Container2>
        friend bool operator!=(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

        template<typename T2, typename Container2>
        friend bool operator<(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

        template<typename T2, typename Container2>
        friend bool operator<=(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

        template<typename T2, typename Container2>
        friend bool operator>(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

        template<typename T2, typename Container2>
        friend bool operator>=(const queue<T2, Container2>& lhs, const queue<T2, Container2>& rhs);

    protected:
        Container c;
    };

    /* non-member functions */
    template<typename T, typename Container>
    bool operator==(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c == rhs.c;
    }

    template<typename T, typename Container>
    bool operator!=(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c != rhs.c;
    }

    template<typename T, typename Container>
    bool operator<(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c < rhs.c;
    }

    template<typename T, typename Container>
    bool operator<=(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c <= rhs.c;
    }

    template<typename T, typename Container>
    bool operator>(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c > rhs.c;
    }

    template<typename T, typename Container>
    bool operator>=(const queue<T, Container>& lhs, const queue<T, Container>& rhs)
    {
        return lhs.c >= rhs.c;
    }

    template<typename T, typename Container>
    void swap(queue<T, Container>& lhs, queue<T, Container>& rhs) noexcept(noexcept(lhs.swap(rhs)))
    {
        lhs.swap(rhs);
    }
}
